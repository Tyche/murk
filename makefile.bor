#
# Murk++ build for bprland c++
#
.AUTODEPEND
BCCROOT = $(MAKEDIR)\..
CPP = $(BCCROOT)\bin\bcc32
CC = $(BCCROOT)\bin\bcc32
LD = $(BCCROOT)\bin\ilink32
AR = $(BCCROOT)\bin\tlib
WINZIP = C:\apps\Winzip\wzzip

# Compiler directives for debugging
!ifdef DEBUG
DEBUG_CFLAGS = -v -y -Od -r- 
DEBUG_LFLAGS = -v 
!else
DEBUG_CFLAGS = -v- -O2 
DEBUG_LFLAGS = -v- 
!endif
INCS = -Isqlite3 -I$(BCCROOT)\include

# Compiler/linker directives for linking static or dynamic
!ifdef STATIC
STATIC_CFLAGS =
LIBS      = import32.lib cw32.lib ws2_32.lib
!else
STATIC_CFLAGS = -tWR
LIBS      = import32.lib cw32i.lib ws2_32.lib
!endif
BCC32STARTUP = c0x32.obj

MSGS= -w -w-sig -w-par  -w-use -w-pia 
DEFS= -DWIN32 -DWIN32_LEAN_AND_MEAN -D_NO_VCL 
OPTIM= $(STATIC_CFLAGS) $(DEBUG_CFLAGS) -tWM -tWC -$(PROCESSOR_LEVEL) 
CFLAGS= $(OPTIM) $(MSGS) $(DEFS)
LFLAGS = -Tpe -ap -c -Gn $(DEBUG_LFLAGS) 

SQLITE_SRC = sqlite3\alter.c sqlite3\analyze.c sqlite3\attach.c \
	sqlite3\auth.c sqlite3\btree.c sqlite3\build.c sqlite3\callback.c \
	sqlite3\complete.c sqlite3\date.c sqlite3\delete.c sqlite3\expr.c \
	sqlite3\func.c sqlite3\hash.c sqlite3\insert.c sqlite3\legacy.c \
	sqlite3\loadext.c sqlite3\main.c sqlite3\opcodes.c sqlite3\os.c \
	sqlite3\os_win.c sqlite3\pager.c sqlite3\parse.c sqlite3\pragma.c \
	sqlite3\prepare.c sqlite3\printf.c sqlite3\random.c sqlite3\select.c \
	sqlite3\table.c sqlite3\tokenize.c sqlite3\trigger.c sqlite3\update.c \
	sqlite3\utf.c sqlite3\util.c sqlite3\vacuum.c sqlite3\vdbe.c \
	sqlite3\vdbeapi.c sqlite3\vdbeaux.c sqlite3\vdbefifo.c \
	sqlite3\vdbemem.c sqlite3\vtab.c sqlite3\where.c
SQLITE_OBJ = $(SQLITE_SRC:.c=.obj)
SQLITE_LIB = sqlite3\sqlite3.lib

SQLITE_PRG_SRC = sqlite3\shell.c 
SQLITE_PRG_OBJ = $(SQLITE_PRG_SRC:.c=.obj)
SQLITE_PRG = sqlite3\sqlite3.exe 

SQLITE_XTRA = sqlite3\os_unix.c sqlite3\sqlite3.def sqlite3\btree.h \
	sqlite3\os.h sqlite3\sqlite3.h sqlite3\vdbeInt.h sqlite3\hash.h \
	sqlite3\os_common.h sqlite3\sqlite3ext.h sqlite3\keywordhash.h \
	sqlite3\pager.h sqlite3\sqliteInt.h sqlite3\opcodes.h sqlite3\parse.h \
	sqlite3\vdbe.h

MURK_SRC = murk.cpp
MURK_OBJ = murk.obj

# Data files Areas, Mobprogs and Players
DATAFILES = area.lst limbo.are mid_cit.prg midgaard.are school.are help.are \
        vagabond.prg beggar.prg crier.prg drunk.prg gategrd.prg gategrd2.prg \
	janitor.prg One 

# Files in the standard distribution
DISTFILES = $(MURK_SRC) $(DATAFILES) \
	Makefile Makefile.bor Makefile.vc doc.txt startup \
	license.crypt license.diku license.merc license.murk++ 
  
!ifndef RELEASE
RELEASE=dist
!endif

TARGETS = $(SQLITE_LIB) $(SQLITE_PRG) murk.exe

all: $(TARGETS)

$(SQLITE_LIB): $(SQLITE_OBJ)
	-@del $< 2>NUL
	$(AR) $< /a $**

$(SQLITE_PRG): $(SQLITE_PRG_OBJ) $(SQLITE_LIB)
	$(LD) $(LFLAGS) $(BCC32STARTUP) $**, $<,, $(LIBS) 

murk.exe: $(MURK_OBJ)
	$(LD) $(LFLAGS) $(BCC32STARTUP) $**, $<,, $(LIBS) 

clean:
	@-del *.tds sqlite3\*.tds *.map *.tr2 $(TARGETS) $(MURK_OBJ) \
	$(SQLITE_OBJ) $(SQLITE_PRG_OBJ) 2>NUL
	
dist : $(DISTFILES)
	@echo "Building distribution..."
	@-md murk++
	@!copy /y "$**" "murk++" 1>NUL
	@echo .svn > ex.tmp
        @xcopy sqlite3 "murk++\sqlite3" /I /E /Y /Q /EXCLUDE:ex.tmp 
        @del ex.tmp
	@$(WINZIP) -Pr murk++-$(RELEASE).zip murk++ 1>NUL 2>NUL
	@rd /s /q murk++
	@echo "Done."

.c.obj:
	$(CC) $(CFLAGS) $(INCS) -c -n$(@D) $<

.cpp.obj:
	$(CC) $(CFLAGS) $(INCS) -c -n$(@D) $<

